# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from discovery.protobuf import discovery_pb2 as discovery__pb2


class DiscoveryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterService = channel.unary_unary(
                '/discovery.Discovery/RegisterService',
                request_serializer=discovery__pb2.RegisterServiceRequest.SerializeToString,
                response_deserializer=discovery__pb2.RegisterServiceResponse.FromString,
                )
        self.UnregisterService = channel.unary_unary(
                '/discovery.Discovery/UnregisterService',
                request_serializer=discovery__pb2.UnregisterServiceRequest.SerializeToString,
                response_deserializer=discovery__pb2.UnregisterServiceResponse.FromString,
                )
        self.KeepAlive = channel.unary_unary(
                '/discovery.Discovery/KeepAlive',
                request_serializer=discovery__pb2.KeepAliveRequest.SerializeToString,
                response_deserializer=discovery__pb2.KeepAliveResponse.FromString,
                )
        self.GetService = channel.unary_unary(
                '/discovery.Discovery/GetService',
                request_serializer=discovery__pb2.GetServiceRequest.SerializeToString,
                response_deserializer=discovery__pb2.GetServiceResponse.FromString,
                )


class DiscoveryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KeepAlive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiscoveryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterService': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterService,
                    request_deserializer=discovery__pb2.RegisterServiceRequest.FromString,
                    response_serializer=discovery__pb2.RegisterServiceResponse.SerializeToString,
            ),
            'UnregisterService': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterService,
                    request_deserializer=discovery__pb2.UnregisterServiceRequest.FromString,
                    response_serializer=discovery__pb2.UnregisterServiceResponse.SerializeToString,
            ),
            'KeepAlive': grpc.unary_unary_rpc_method_handler(
                    servicer.KeepAlive,
                    request_deserializer=discovery__pb2.KeepAliveRequest.FromString,
                    response_serializer=discovery__pb2.KeepAliveResponse.SerializeToString,
            ),
            'GetService': grpc.unary_unary_rpc_method_handler(
                    servicer.GetService,
                    request_deserializer=discovery__pb2.GetServiceRequest.FromString,
                    response_serializer=discovery__pb2.GetServiceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'discovery.Discovery', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Discovery(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/discovery.Discovery/RegisterService',
            discovery__pb2.RegisterServiceRequest.SerializeToString,
            discovery__pb2.RegisterServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnregisterService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/discovery.Discovery/UnregisterService',
            discovery__pb2.UnregisterServiceRequest.SerializeToString,
            discovery__pb2.UnregisterServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KeepAlive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/discovery.Discovery/KeepAlive',
            discovery__pb2.KeepAliveRequest.SerializeToString,
            discovery__pb2.KeepAliveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/discovery.Discovery/GetService',
            discovery__pb2.GetServiceRequest.SerializeToString,
            discovery__pb2.GetServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
